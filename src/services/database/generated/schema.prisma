generator client {
  provider = "prisma-client-js"
  output   = "../src/services/database/generated"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  background    String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  authenticator Authenticator[]
  todos         Todo[]
  chats         Chat[]
  messages      Message[]

  @@map("users")
}

model Chat {
  id        String   @id @default(cuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("chats")
}

enum MessageRole {
  USER
  ASSISTANT
}

model Message {
  id        String      @id @default(cuid())
  content   String      @db.Text
  role      MessageRole
  parts     Json?
  createdAt DateTime    @default(now())
  chatId    String
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  User      User?       @relation(fields: [userId], references: [id])
  userId    String?

  @@index([chatId])
  @@map("messages")
}

enum TodoStatus {
  PENDING
  FINISHED
  CANCELLED
}

model Todo {
  id        String  @id @default(cuid())
  title     String
  completed Boolean @default(false)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  doneAt      DateTime?
  cancelledAt DateTime?
  status      TodoStatus @default(PENDING)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("todos")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionToken])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}
